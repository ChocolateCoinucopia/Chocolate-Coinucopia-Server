#<VirtualHost _default_:80>
#   ServerName www.chocolatecoinucopia.com
#   ServerAlias pc
#   DocumentRoot "/var/www/sites/pc"
#   ErrorLog "logs/pc/error_log"

#   <IfModule log_config_module>

#       CustomLog "logs/pc/access_log" combined
#   </IfModule>
#</VirtualHost>


<VirtualHost _default_:443>

    ServerName www.chocolatecoinucopia.com:443
    ServerAlias pc
    DocumentRoot "/var/www/sites/pc"
    ErrorLog "logs/pc/error_log"

    <IfModule log_config_module>

        CustomLog "logs/pc/access_log" combined
    </IfModule>

# General setup for the virtual host, inherited from global configuration
#DocumentRoot "/var/www/html"
#ServerName www.example.com:443

# Use separate log files for the SSL virtual host; note that LogLevel
# is not inherited from httpd.conf.
    ErrorLog logs/pc/ssl_error_log
    TransferLog logs/pc/ssl_access_log
    LogLevel warn

#   SSL Engine Switch:
#   Enable/Disable SSL for this virtual host.
    SSLEngine on

#   SSL Protocol support:
# List the enable protocol levels with which clients will be able to
# connect.  Disable SSLv2 access by default:
    SSLProtocol all -SSLv3

#   SSL Cipher Suite:
#   List the ciphers that the client is permitted to negotiate.
#   See the mod_ssl documentation for a complete list.
    SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5:!SEED:!IDEA

#   Speed-optimized SSL Cipher configuration:
#   If speed is your main concern (on busy HTTPS servers e.g.),
#   you might want to force clients to specific, performance
#   optimized ciphers. In this case, prepend those ciphers
#   to the SSLCipherSuite list, and enable SSLHonorCipherOrder.
#   Caveat: by giving precedence to RC4-SHA and AES128-SHA
#   (as in the example below), most connections will no longer
#   have perfect forward secrecy - if the server's key is
#   compromised, captures of past or future traffic must be
#   considered compromised, too.
#SSLCipherSuite RC4-SHA:AES128-SHA:HIGH:MEDIUM:!aNULL:!MD5
#SSLHonorCipherOrder on 

#   Server Certificate:
#   Point SSLCertificateFile at a PEM encoded certificate.  If
#   the certificate is encrypted, then you will be prompted for a
#   pass phrase.  Note that a kill -HUP will prompt again.  A new
#   certificate can be generated using the genkey(1) command.
#SSLCertificateFile /etc/pki/tls/certs/www.chocolatecoinucopia.com.crt
    SSLCertificateFile /etc/ssl/certs/selfsigned-replace.crt

#   Server Private Key:
#   If the key is not combined with the certificate, use this
#   directive to point at the key file.  Keep in mind that if
#   you've both a RSA and a DSA private key you can configure
#   both in parallel (to also allow the use of DSA ciphers, etc.)
#   SSLCertificateKeyFile /etc/pki/tls/private/www.chocolatecoinucopia.com.pem
    SSLCertificateKeyFile /etc/ssl/private/selfsigned-replace.key

#   Server Certificate Chain:
#   Point SSLCertificateChainFile at a file containing the
#   concatenation of PEM encoded CA certificates which form the
#   certificate chain for the server certificate. Alternatively
#   the referenced file can be the same as SSLCertificateFile
#   when the CA certificates are directly appended to the server
#   certificate for convinience.
#SSLCertificateChainFile /etc/pki/tls/certs/server-chain.crt

#   Certificate Authority (CA):
#   Set the CA certificate verification path where to find CA
#   certificates for client authentication or alternatively one
#   huge file containing all of them (file must be PEM encoded)
#SSLCACertificateFile /etc/pki/tls/certs/ca-bundle.crt

#   Client Authentication (Type):
#   Client certificate verification type and depth.  Types are
#   none, optional, require and optional_no_ca.  Depth is a
#   number which specifies how deeply to verify the certificate
#   issuer chain before deciding the certificate is not valid.
#SSLVerifyClient require
#SSLVerifyDepth  10

#   Access Control:
#   With SSLRequire you can do per-directory access control based
#   on arbitrary complex boolean expressions containing server
#   variable checks and other lookup directives.  The syntax is a
#   mixture between C and Perl.  See the mod_ssl documentation
#   for more details.
#<Location />
#SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \
#            and %{SSL_CLIENT_S_DN_O} eq "Snake Oil, Ltd." \
#            and %{SSL_CLIENT_S_DN_OU} in {"Staff", "CA", "Dev"} \
#            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \
#            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \
#           or %{REMOTE_ADDR} =~ m/^192\.76\.162\.[0-9]+$/
#</Location>

#   SSL Engine Options:
#   Set various options for the SSL engine.
#   o FakeBasicAuth:
#     Translate the client X.509 into a Basic Authorisation.  This means that
#     the standard Auth/DBMAuth methods can be used for access control.  The
#     user name is the `one line' version of the client's X.509 certificate.
#     Note that no password is obtained from the user. Every entry in the user
#     file needs this password: `xxj31ZMTZzkVA'.
#   o ExportCertData:
#     This exports two additional environment variables: SSL_CLIENT_CERT and
#     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
#     server (always existing) and the client (only existing when client
#     authentication is used). This can be used to import the certificates
#     into CGI scripts.
#   o StdEnvVars:
#     This exports the standard SSL/TLS related `SSL_*' environment variables.
#     Per default this exportation is switched off for performance reasons,
#     because the extraction step is an expensive operation and is usually
#     useless for serving static content. So one usually enables the
#     exportation for CGI and SSI requests only.
#   o StrictRequire:
#     This denies access when "SSLRequireSSL" or "SSLRequire" applied even
#     under a "Satisfy any" situation, i.e. when it applies access is denied
#     and no other module can change it.
#   o OptRenegotiate:
#     This enables optimized SSL connection renegotiation handling when SSL
#     directives are used in per-directory context. 
#SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
    <Files ~ "\.(cgi|shtml|phtml|php3?)$">
        SSLOptions +StdEnvVars
    </Files>
    <Directory "/var/www/cgi-bin">
        SSLOptions +StdEnvVars
    </Directory>

#   SSL Protocol Adjustments:
#   The safe and default but still SSL/TLS standard compliant shutdown
#   approach is that mod_ssl sends the close notify alert but doesn't wait for
#   the close notify alert from client. When you need a different shutdown
#   approach you can use one of the following variables:
#   o ssl-unclean-shutdown:
#     This forces an unclean shutdown when the connection is closed, i.e. no
#     SSL close notify alert is send or allowed to received.  This violates
#     the SSL/TLS standard but is needed for some brain-dead browsers. Use
#     this when you receive I/O errors because of the standard approach where
#     mod_ssl sends the close notify alert.
#   o ssl-accurate-shutdown:
#     This forces an accurate shutdown when the connection is closed, i.e. a
#     SSL close notify alert is send and mod_ssl waits for the close notify
#     alert of the client. This is 100% SSL/TLS standard compliant, but in
#     practice often causes hanging connections with brain-dead browsers. Use
#     this only for browsers where you know that their SSL implementation
#     works correctly. 
#   Notice: Most problems of broken clients are also related to the HTTP
#   keep-alive facility, so you usually additionally want to disable
#   keep-alive for those clients, too. Use variable "nokeepalive" for this.
#   Similarly, one has to force some clients to use HTTP/1.0 to workaround
#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
#   "force-response-1.0" for this.
    BrowserMatch "MSIE [2-5]" \
             nokeepalive ssl-unclean-shutdown \
             downgrade-1.0 force-response-1.0

#   Per-Server Logging:
#   The home of a custom SSL log file. Use this when you want a
#   compact non-error SSL logfile on a virtual host basis.
    CustomLog logs/pc/ssl_request_log \
              "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"
</VirtualHost>


<Directory "/var/www/sites/pc">

    Options Indexes FollowSymLinks

    AllowOverride all

    Require all granted

    RewriteEngine on

    RewriteCond %{REQUEST_URI} !^/Information$
    RewriteCond %{REQUEST_URI} ^/(information)(\.php)?(\.html)?$ [NC]
    RewriteRule ^(.*)$ /Information [L,R=301]

    RewriteCond %{REQUEST_URI} !^/Analysis$
    RewriteCond %{REQUEST_URI} ^/(analysis)(\.php)?(\.html)?$ [NC]
    RewriteRule ^(.*)$ /Analysis [L,R=301]

    RewriteCond %{REQUEST_URI} !^/Valuation$
    RewriteCond %{REQUEST_URI} ^/(valuation)(\.php)?(\.html)?$ [NC]
    RewriteRule ^(.*)$ /Valuation [L,R=301]

    RewriteCond %{REQUEST_URI} !^/Simulator$
    RewriteCond %{REQUEST_URI} ^/(simulator)(\.php)?(\.html)?$ [NC]
    RewriteRule ^(.*)$ /Simulator [L,R=301]

    RewriteCond %{REQUEST_URI} !^/Buy$
    RewriteCond %{REQUEST_URI} ^/(buy)(\.php)?(\.html)?$ [NC]
    RewriteRule ^(.*)$ /Buy [L,R=301]

    RewriteCond %{REQUEST_URI} !^/Buy/CHOC$
    RewriteCond %{REQUEST_URI} ^/(buy/choc)(\.php)?(\.html)?$ [NC]
    RewriteRule ^(.*)$ /Buy/CHOC [L,R=301]

    RewriteCond %{REQUEST_URI} !^/Buy/CC$
    RewriteCond %{REQUEST_URI} ^/(buy/cc)(\.php)?(\.html)?$ [NC]
    RewriteRule ^(.*)$ /Buy/CC [L,R=301]

    RewriteCond %{REQUEST_URI} !^/Exchange$
    RewriteCond %{REQUEST_URI} ^/(exchange)(\.php)?(\.html)?$ [NC]
    RewriteRule ^(.*)$ /Exchange [L,R=301]

    RewriteCond %{REQUEST_URI} !^/Chart$
    RewriteCond %{REQUEST_URI} ^/(chart)(\.php)?(\.html)?$ [NC]
    RewriteRule ^(.*)$ /Chart [L,R=301]

    RewriteCond %{REQUEST_URI} !^/Wallet$
    RewriteCond %{REQUEST_URI} ^/(wallet)(\.php)?(\.html)?$ [NC]
    RewriteRule ^(.*)$ /Wallet [L,R=301]

    RewriteCond %{REQUEST_URI} !^/Orders$
    RewriteCond %{REQUEST_URI} ^/(orders)(\.php)?(\.html)?$ [NC]
    RewriteRule ^(.*)$ /Orders [L,R=301]

    RewriteCond %{REQUEST_URI} !^/History$
    RewriteCond %{REQUEST_URI} ^/(history)(\.php)?(\.html)?$ [NC]
    RewriteRule ^(.*)$ /History [L,R=301]

    RewriteCond %{REQUEST_URI} !^/Rain$
    RewriteCond %{REQUEST_URI} ^/(rain)(\.php)?(\.html)?$ [NC]
    RewriteRule ^(.*)$ /Rain [L,R=301]

    RewriteCond %{REQUEST_URI} !^/Test$
    RewriteCond %{REQUEST_URI} ^/(test)(\.php)?(\.html)?$ [NC]
    RewriteRule ^(.*)$ /Test [L,R=301]

    RewriteCond %{REQUEST_URI} ^/(Buy/CHOC)(\.php)?(\.html)?$ [NC]
    RewriteRule ^(.*)$ /Buy-CHOC [L]

    RewriteCond %{REQUEST_URI} ^/(Buy/CC)(\.php)?(\.html)?$ [NC]
    RewriteRule ^(.*)$ /Buy-CC [L]

    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !(/CHOC/) [NC]
    RewriteCond %{REQUEST_FILENAME} !(/css/) [NC]
    RewriteCond %{REQUEST_FILENAME} !(/js/) [NC]
    RewriteCond %{REQUEST_FILENAME} !(/json/) [NC]
    RewriteCond %{REQUEST_FILENAME} !(/images/) [NC]
    RewriteRule ^(.*)$ /CHOC/$1 [L]

    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME}.php -f
    RewriteRule ^(.*)$ $1.php [L]

    ErrorDocument 400 /index.php
    ErrorDocument 401 /index.php
    ErrorDocument 402 /index.php
    ErrorDocument 403 /index.php
    ErrorDocument 404 /index.php
    ErrorDocument 405 /index.php
    ErrorDocument 406 /index.php
    ErrorDocument 407 /index.php
    ErrorDocument 408 /index.php
    ErrorDocument 409 /index.php
    ErrorDocument 410 /index.php
    ErrorDocument 411 /index.php
    ErrorDocument 412 /index.php
    ErrorDocument 413 /index.php
    ErrorDocument 414 /index.php
    ErrorDocument 415 /index.php
    ErrorDocument 416 /index.php
    ErrorDocument 417 /index.php
#   ErrorDocument 418 /index.php
    ErrorDocument 422 /index.php
    ErrorDocument 423 /index.php
    ErrorDocument 424 /index.php
    ErrorDocument 426 /index.php
    ErrorDocument 428 /index.php
    ErrorDocument 429 /index.php
    ErrorDocument 431 /index.php
#   ErrorDocument 444 /index.php
    ErrorDocument 451 /index.php
#   ErrorDocument 499 /index.php
    ErrorDocument 500 /index.php
    ErrorDocument 501 /index.php
    ErrorDocument 502 /index.php
    ErrorDocument 503 /index.php
    ErrorDocument 504 /index.php
    ErrorDocument 505 /index.php
    ErrorDocument 506 /index.php
    ErrorDocument 507 /index.php
    ErrorDocument 508 /index.php
    ErrorDocument 510 /index.php
    ErrorDocument 511 /index.php
#   ErrorDocument 599 /index.php
</Directory>
